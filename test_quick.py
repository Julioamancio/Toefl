#!/usr/bin/env python3
"""
Teste r√°pido para verificar se o editor de certificados est√° funcionando
"""
import requests
import json
import sys

def test_certificate_editor():
    print("üîç Testando editor de certificados...")
    
    try:
        # Testar se o servidor est√° rodando
        print("1. Verificando se servidor est√° ativo...")
        response = requests.get('http://localhost:5000', timeout=5)
        print(f"   ‚úÖ Servidor ativo (status: {response.status_code})")
        
        # Testar p√°gina de login
        print("2. Testando p√°gina de login...")
        login_page = requests.get('http://localhost:5000/login', timeout=5)
        print(f"   ‚úÖ P√°gina de login acess√≠vel (status: {login_page.status_code})")
        
        # Fazer login
        print("3. Fazendo login como admin...")
        session = requests.Session()
        
        # Primeiro obter a p√°gina de login para pegar o CSRF token
        login_page = session.get('http://localhost:5000/login', timeout=5)
        
        # Extrair CSRF token
        csrf_token = None
        import re
        match = re.search(r'csrf-token.*?content="([^"]+)"', login_page.text)
        if match:
            csrf_token = match.group(1)
            print(f"   üîë CSRF token obtido: {csrf_token[:20]}...")
        else:
            print("   ‚ö†Ô∏è  CSRF token n√£o encontrado na p√°gina de login")
        
        # Fazer login com CSRF token
        login_data = {
            'username': 'admin', 
            'password': 'admin',
            'csrf_token': csrf_token
        }
        login_response = session.post('http://localhost:5000/login', data=login_data, timeout=10)
        
        if login_response.status_code == 200 and 'alunos' in login_response.url:
            print("   ‚úÖ Login realizado com sucesso")
        else:
            print(f"   ‚ùå Falha no login (status: {login_response.status_code})")
            return False
        
        # Testar p√°gina de alunos
        print("4. Acessando p√°gina de alunos...")
        students_page = session.get('http://localhost:5000/alunos', timeout=5)
        print(f"   ‚úÖ P√°gina de alunos acess√≠vel (status: {students_page.status_code})")
        
        # Testar editor de certificados
        print("5. Acessando editor de certificados...")
        editor_page = session.get('http://localhost:5000/certificate/editor/1', timeout=5)
        
        if editor_page.status_code == 200:
            print("   ‚úÖ Editor de certificados acess√≠vel")
            
            # Verificar se h√° elementos essenciais na p√°gina
            if 'savePositions' in editor_page.text:
                print("   ‚úÖ Fun√ß√£o savePositions encontrada no JavaScript")
            else:
                print("   ‚ö†Ô∏è  Fun√ß√£o savePositions n√£o encontrada")
                
            if 'csrf-token' in editor_page.text:
                print("   ‚úÖ Token CSRF encontrado na p√°gina")
            else:
                print("   ‚ö†Ô∏è  Token CSRF n√£o encontrado")
                
        else:
            print(f"   ‚ùå Editor n√£o acess√≠vel (status: {editor_page.status_code})")
            return False
            
        print("\nüéâ TESTE CONCLU√çDO - Editor de certificados est√° funcionando!")
        return True
        
    except requests.exceptions.ConnectionError:
        print("‚ùå ERRO: N√£o foi poss√≠vel conectar ao servidor Flask")
        print("   Verifique se o servidor est√° rodando em http://localhost:5000")
        return False
    except requests.exceptions.Timeout:
        print("‚ùå ERRO: Timeout na conex√£o com o servidor")
        return False
    except Exception as e:
        print(f"‚ùå ERRO INESPERADO: {e}")
        return False

if __name__ == "__main__":
    success = test_certificate_editor()
    sys.exit(0 if success else 1)